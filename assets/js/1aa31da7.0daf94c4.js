"use strict";(self.webpackChunkmintlayer_docs=self.webpackChunkmintlayer_docs||[]).push([[66],{2189:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"trezor/build-firmware","title":"Trezor Firmware","description":"This firmware and build process is fully CLI-based.","source":"@site/docs/trezor/1-build-firmware.md","sourceDirName":"trezor","slug":"/trezor/build-firmware","permalink":"/mintlayer-docs/docs/trezor/build-firmware","draft":false,"unlisted":false,"editUrl":"https://github.com/mintlayer/mintlayer-docs/tree/main/docs/trezor/1-build-firmware.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Trezor","permalink":"/mintlayer-docs/docs/category/trezor"},"next":{"title":"Whitepaper","permalink":"/mintlayer-docs/docs/category/whitepaper"}}');var i=n(4848),o=n(8453);const a={},s="Trezor Firmware",l={},d=[{value:"Building Mintlayer Trezor Firmware",id:"building-mintlayer-trezor-firmware",level:2},{value:"Pre-requisites",id:"pre-requisites",level:2}];function c(e){const r={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"trezor-firmware",children:"Trezor Firmware"})}),"\n",(0,i.jsxs)(r.admonition,{title:"No GUI (yet)",type:"info",children:[(0,i.jsxs)(r.p,{children:["This firmware and build process is fully CLI-based.",(0,i.jsx)(r.br,{}),"\n","There is currently ",(0,i.jsx)(r.strong,{children:"no graphical interface"})," for managing the Mintlayer Trezor firmware."]}),(0,i.jsxs)(r.p,{children:["A GUI is in development, but ",(0,i.jsx)(r.strong,{children:"not yet available"}),"."]})]}),"\n",(0,i.jsxs)(r.admonition,{title:"\ufe0f Risk of Device Damage",type:"warning",children:[(0,i.jsxs)(r.p,{children:["The steps below are intended for advanced users. Flashing unofficial firmware ",(0,i.jsx)(r.strong,{children:"may permanently damage your Trezor device"})," or void its warranty."]}),(0,i.jsxs)(r.p,{children:["Only proceed if you fully understand each step and accept the risks. Do ",(0,i.jsx)(r.strong,{children:"not"})," run these commands on a production or primary hardware wallet unless you are absolutely sure of what you are doing."]})]}),"\n",(0,i.jsx)(r.h2,{id:"building-mintlayer-trezor-firmware",children:"Building Mintlayer Trezor Firmware"}),"\n",(0,i.jsx)(r.p,{children:"Ubuntu 24.04 is the recommended environment for building the Mintlayer Trezor firmware. The following steps will guide you through the process of setting up your environment and building the firmware."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-bash",children:"sudo apt update  # Update package lists to get the latest available versions\n\nsudo apt install git  # Install Git for cloning repositories\n\ngit clone --recurse-submodules https://github.com/mintlayer/mintlayer-trezor-firmware.git  # Clone the firmware repo including its submodules\n\ncd mintlayer-trezor-firmware  # Change directory to the cloned firmware project\n\ngit checkout mintlayer-master  # Switch to the Mintlayer-specific firmware branch\n\ncurl -sSL https://install.python-poetry.org | python3 -  # Install Poetry, a dependency manager for Python\n\npoetry install  # Install Python dependencies listed in pyproject.toml\n\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh  # Install Rust toolchain via rustup\n\nrustup default nightly  # Set the nightly version of Rust as the default toolchain\n\nrustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu  # Add Rust source code (needed for cross-compilation)\n\nsudo apt install -y build-essential  # Install essential tools for building software (e.g., gcc, make)\n\nsudo apt install -y python3.12-dev libffi-dev  # Install Python 3.12 development headers and foreign function interface libraries\n\nsudo apt install -y gcc-arm-none-eabi binutils-arm-none-eabi libnewlib-arm-none-eabi  # Install cross-compilation toolchain for ARM (used by Trezor)\n\nsudo apt install -y protobuf-compiler  # Install the Protocol Buffers compiler (used in serialization)\n\nsudo apt install -y clang llvm-dev libclang-dev  # Install LLVM/Clang compiler and development libraries\n\ncd core  # Move into the `core` directory of the firmware source\n\nsource $(poetry env info --path)/bin/activate  # Activate the virtual environment created by Poetry\n\nTREZOR_MODEL=T3T1 make vendor build_firmware  # Set the target Trezor model and build the firmware with required vendor files\n"})}),"\n",(0,i.jsx)(r.h2,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,i.jsxs)(r.p,{children:["Device bootloader must be unlocked to allow unofficial firmware installation. This can be done by following the instructions in the ",(0,i.jsx)(r.a,{href:"https://trezor.io/learn/security-privacy/unlocking-the-bootloader-on-trezor-safe-devices",children:"Trezor documentation"}),"."]})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>s});var t=n(6540);const i={},o=t.createContext(i);function a(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);