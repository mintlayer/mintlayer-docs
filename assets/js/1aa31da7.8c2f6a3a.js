"use strict";(self.webpackChunkmintlayer_docs=self.webpackChunkmintlayer_docs||[]).push([[66],{2189:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"trezor/build-firmware","title":"Trezor Firmware","description":"There is no support for this in Trezor Suite, and Mojito also does not support it yet, although it is currently in development.","source":"@site/docs/trezor/1-build-firmware.md","sourceDirName":"trezor","slug":"/trezor/build-firmware","permalink":"/mintlayer-docs/docs/trezor/build-firmware","draft":false,"unlisted":false,"editUrl":"https://github.com/mintlayer/mintlayer-docs/tree/main/docs/trezor/1-build-firmware.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Trezor","permalink":"/mintlayer-docs/docs/category/trezor"},"next":{"title":"Whitepaper","permalink":"/mintlayer-docs/docs/category/whitepaper"}}');var i=r(4848),o=r(8453);const s={},a="Trezor Firmware",l={},d=[{value:"Building Mintlayer Trezor Firmware",id:"building-mintlayer-trezor-firmware",level:2},{value:"Pre-requisites",id:"pre-requisites",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"trezor-firmware",children:"Trezor Firmware"})}),"\n",(0,i.jsxs)(t.admonition,{title:"GUI and CLI Support Status",type:"info",children:[(0,i.jsxs)(t.p,{children:["There is no support for this in ",(0,i.jsx)(t.strong,{children:"Trezor Suite"}),", and ",(0,i.jsx)(t.strong,{children:"Mojito"})," also does not support it yet, although it is currently ",(0,i.jsx)(t.strong,{children:"in development"}),"."]}),(0,i.jsxs)(t.p,{children:["Support is available in ",(0,i.jsx)(t.strong,{children:"wallet-cli"})," and ",(0,i.jsx)(t.strong,{children:"node-gui"}),", but at the time of writing, these changes have not yet been released, so you will need to build the applications from the latest master branch manually."]})]}),"\n",(0,i.jsxs)(t.admonition,{title:"The following steps are intended for advanced users",type:"warning",children:[(0,i.jsxs)(t.p,{children:["Flashing unofficial firmware ",(0,i.jsx)(t.strong,{children:"may render your Trezor device unusable"})," until it is successfully recovered."]}),(0,i.jsxs)(t.p,{children:["Proceed ",(0,i.jsx)(t.strong,{children:"only if you fully understand each step"})," and accept the associated risks.\nDo ",(0,i.jsx)(t.strong,{children:"not"})," attempt this on your primary or production hardware wallet unless you are absolutely certain of what you\u2019re doing."]})]}),"\n",(0,i.jsx)(t.h2,{id:"building-mintlayer-trezor-firmware",children:"Building Mintlayer Trezor Firmware"}),"\n",(0,i.jsx)(t.p,{children:"Ubuntu 24.04 is the recommended environment for building the Mintlayer Trezor firmware. The following steps will guide you through the process of setting up your environment and building the firmware."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"sudo apt update  # Update package lists to get the latest available versions\n\nsudo apt install git  # Install Git for cloning repositories\n\ngit clone --recurse-submodules https://github.com/mintlayer/mintlayer-trezor-firmware.git  # Clone the firmware repo including its submodules\n\ncd mintlayer-trezor-firmware  # Change directory to the cloned firmware project\n\ngit checkout mintlayer-master  # Switch to the Mintlayer-specific firmware branch\n\ncurl -sSL https://install.python-poetry.org | python3 -  # Install Poetry, a dependency manager for Python\n\npoetry install  # Install Python dependencies listed in pyproject.toml\n\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh  # Install Rust\n\nrustup default nightly  # Set the nightly version of Rust as the default toolchain\n\nrustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu  # Add Rust source code and the required toolchain\n\nsudo apt install -y build-essential  # Install essential tools for building software (e.g., gcc, make)\n\nsudo apt install -y python3.12-dev libffi-dev  # Install Python 3.12 development headers and foreign function interface libraries\n\nsudo apt install -y gcc-arm-none-eabi binutils-arm-none-eabi libnewlib-arm-none-eabi  # Install cross-compilation toolchain for ARM (used by Trezor)\n\nsudo apt install -y protobuf-compiler  # Install the Protocol Buffers compiler (used in serialization)\n\nsudo apt install -y clang llvm-dev libclang-dev  # Install LLVM/Clang compiler and development libraries\n\ncd core  # Move into the `core` directory of the firmware source\n\nsource $(poetry env info --path)/bin/activate  # Activate the virtual environment created by Poetry\n\nTREZOR_MODEL=T3T1 make vendor build_firmware  # Set the target Trezor model and build the firmware with required vendor files\n"})}),"\n",(0,i.jsx)(t.h2,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,i.jsxs)(t.p,{children:["Device bootloader must be unlocked to allow unofficial firmware installation. This can be done by following the instructions in the ",(0,i.jsx)(t.a,{href:"https://trezor.io/learn/security-privacy/unlocking-the-bootloader-on-trezor-safe-devices",children:"Trezor documentation"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>a});var n=r(6540);const i={},o=n.createContext(i);function s(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);